# Generated by Django 3.0.5 on 2020-05-19 19:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('general', '0001_initial'),
        ('circles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date time on wich the object was created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Date time on wich the object was last modified.')),
                ('name', models.CharField(blank=True, help_text='This is a name of the pet. It is optional. If you do not know the name of pet, you can leave this field blank.', max_length=32, null=True)),
                ('information', models.TextField(help_text='This is a description of pet, or other iformation. It is required.')),
                ('tag', models.CharField(choices=[('lost', 'Lost'), ('finded', 'Finded'), ('adoption', 'Adoption')], help_text='This field represents the type of post.', max_length=16)),
                ('state', models.CharField(blank=True, choices=[('open', 'Open'), ('finished', 'Finished'), ('cancelled', 'Cancelled')], default='open', help_text='This field indicates if the post is available yet or not.', max_length=16)),
                ('color_primary', models.CharField(choices=[('black', 'Black'), ('white', 'White'), ('gray', 'Gray'), ('brown', 'Brown'), ('other', 'Other')], help_text='This is a principal color of pet. It is required.', max_length=16)),
                ('color_secondary', models.CharField(blank=True, choices=[('black', 'Black'), ('white', 'White'), ('gray', 'Gray'), ('brown', 'Brown'), ('other', 'Other')], help_text='This is a secondary color of pet. It is optional. If the pet does not have more than one color, set this field on null.', max_length=16, null=True)),
                ('size', models.CharField(choices=[('s', 'Small'), ('m', 'Medium'), ('b', 'Big')], help_text='This is the size of pet. The options of small, medium, and big.', max_length=1)),
                ('photo_first', models.ImageField(help_text='This image helps for identify a pet. This field is required. If you do not have a photo you can search a photo of similar pet.', upload_to='posts/pets/photos/')),
                ('photo_second', models.ImageField(blank=True, help_text='This image helps for identify a pet. This field is optional.', null=True, upload_to='posts/pets/photos/')),
                ('photo_third', models.ImageField(blank=True, help_text='This image helps for identify a pet. This field is optional.', null=True, upload_to='posts/pets/photos/')),
                ('latitude', models.FloatField(default=0.0, help_text='This is the latitude of the location. This information will be used for contact, and for facilitate the search.')),
                ('longitude', models.FloatField(default=0.0, help_text='This is the longitude of the location. This information will be used for contact, and for facilitate the search.')),
                ('breed', models.ForeignKey(help_text='This is the bread of the pet.', on_delete=django.db.models.deletion.PROTECT, to='general.Breed')),
                ('circle', models.ForeignKey(blank=True, help_text='A post can be related to a circle, but it is not required.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='circles.Circle')),
                ('user', models.ForeignKey(help_text='This is the user owner the post.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': ['-created', '-modified'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date time on wich the object was created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Date time on wich the object was last modified.')),
                ('content', models.TextField(help_text='This is the content of the comment.')),
                ('post', models.ForeignKey(help_text='This is the commented post.', on_delete=django.db.models.deletion.CASCADE, to='posts.Post')),
                ('user', models.ForeignKey(help_text='This is the user who write the comment. It is required.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': ['-created', '-modified'],
                'abstract': False,
            },
        ),
    ]
