# Generated by Django 3.0.5 on 2020-05-19 19:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date time on wich the object was created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Date time on wich the object was last modified.')),
                ('email', models.EmailField(error_messages={'unique': 'A user with this email already exists.'}, help_text='This field is required, unique and identification field for login.', max_length=254, unique=True)),
                ('first_name', models.CharField(help_text="User's first name.", max_length=30)),
                ('last_name', models.CharField(help_text="User's last name.", max_length=150)),
                ('phone', models.CharField(blank=True, help_text='Phone number for contact. It is optional.', max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='Phone number can contains a country code, and allow 16 characters maximum. Example: +593 0987654321.', regex='\\+?1?\\d{9,16}$')])),
                ('biography', models.TextField(blank=True, help_text='This field is optional and is an small user description.', null=True)),
                ('profile_photo', models.ImageField(blank=True, help_text='User profile picture.', null=True, upload_to='accounts/profile_pictures/')),
                ('latitude', models.FloatField(blank=True, default=0.0, help_text="Latitude of user's home location. It is a number with decimals.")),
                ('longitude', models.FloatField(blank=True, default=0.0, help_text="Longitude of user's home location. It is a number with decimals.")),
                ('is_confirmed', models.BooleanField(default=False, help_text='An account is confirmed only when the user verified his email account.')),
                ('is_verified', models.BooleanField(default=False, help_text="An account is verified only when the user's identity was confirmed by staff.")),
            ],
            options={
                'ordering': ['username'],
                'get_latest_by': ['-created', '-modified'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Following',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date time on wich the object was created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Date time on wich the object was last modified.')),
                ('user_from', models.ForeignKey(help_text='This is a user that follow.', on_delete=django.db.models.deletion.CASCADE, related_name='following_user_from_user', to=settings.AUTH_USER_MODEL)),
                ('user_to', models.ForeignKey(help_text='This is a user that is followed.', on_delete=django.db.models.deletion.CASCADE, related_name='following_user_to_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': ['-created', '-modified'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='follows',
            field=models.ManyToManyField(help_text='The users that this user is following.', through='accounts.Following', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='following',
            constraint=models.UniqueConstraint(fields=('user_from', 'user_to'), name='unique_user_from_user_to'),
        ),
    ]
